<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/7/2014 10:17:04 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="IMONCIVAIS-L6"
  DTS:CreatorName="CORPHQ\IMoncivais"
  DTS:DTSID="{67B9486A-2A77-4384-A2CC-E4CCEDA0EADB}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.5583.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="ComparativeAnalysis"
  DTS:PackageType="5"
  DTS:VersionBuild="13"
  DTS:VersionGUID="{23A42E67-4742-40EA-B8A8-93D6CF3AB342}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[HQ-FINSQL-01.Audit.SSISUser]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FE47E1E0-FF89-4FB8-A71C-1846B6D6091C}"
      DTS:ObjectName="HQ-FINSQL-01.Audit.SSISUser">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=HQ-FINSQL-01;User ID=SSISUser;Initial Catalog=Audit;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAADk0+5xA9nE2QUT/D3g474QAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABAXthug6T6bOHP9roBh43tAAAAAASAAACgAAAAEAAAALlyboIDteusBrlCqZdxXWkoAAAA/CBX+WyEfLM53hryyxNNhbgpbjsVr2qBHyk9qnEPFdGE5SB+gtQTgxQAAAAHNKzoxAFjQmc99vbIYwoMbdhWFA</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create Calendar and Stores"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2d513cca-f0dc-41c0-bce5-57f29a3d45f8}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create Calendar and Stores"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; Â© 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FE47E1E0-FF89-4FB8-A71C-1846B6D6091C}"
          SQLTask:SqlStatementSource="&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Run in HQ-FINSQL-01 dailya at 8:00 AM as job:&#x9;&#x9;DW - 8a -Comparative Analysis of Sales, Guest &amp; SalesMix&#xA;&#xA;USE [Staging]&#xA;GO&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Calculate open stores' dates&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;sto.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CASE WHEN CONVERT(DATE, sto.[AcquiredDate])&#x9;&gt;=&#x9;DATEADD(MM, -18, GETDATE())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; THEN CONVERT(DATE, sto.[AcquiredDate])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ELSE CONVERT(DATE, sto.[OpenDate])&#x9;&#x9;&#x9;&#x9;&#x9;END&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#StoreCategoryChang]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[Staging].[dbo].[Store]&#x9;&#x9;&#x9;sto&#xA;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;[Staging].[dbo].[Attribute]&#x9;&#x9;atr&#xA;&#x9;&#x9;&#x9;&#x9;  ON&#x9;atr.AttributeCode&#x9;&#x9;=&#x9;&#x9;sto.[RRFPCode]&#xA;&#x9;&#x9;&#x9;   WHERE&#x9;atr.[AttributeName]&#x9;&#x9;IN&#x9;&#x9;('RRGB', 'RRBW')&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;--&#x9;select * from [#StoreCategoryChang] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Calculate open stores' category changing dates&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;sto.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, cdt.[FiscalQuarterBeginDate])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;cdt.[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;cdt.[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CASE&#x9;WHEN&#x9;cdt.[DayNumOfYear]&#x9;&#x9;   &gt;=&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;DATEADD(YY, 1, CONVERT(DATE, cdt.[YearBeginDate]))&#x9;&#x9;&#x9;END&#x9;AS&#x9;[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CASE&#x9;WHEN&#x9;cdt.[DayNumOfFiscalQuarter]&#x9;=&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;(cdt.[FiscalQuarterNumOverall] +5)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN&#x9;cdt.[DayNumOfFiscalQuarter]&#x9;&gt;&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;(cdt.[FiscalQuarterNumOverall]+6)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#x9;AS&#x9;[O_ChgCatQtr]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CAST(NULL AS DATE)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#StoreCategoryChange]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#StoreCategoryChang]&#x9;&#x9;&#x9;&#x9;sto&#xA;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;[Staging].[dbo].[vwCalendarShort]&#x9;cdt&#xA;&#x9;&#x9;&#x9;&#x9;  ON&#x9;cdt.[FullDate]&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;sto.[OpenDate]&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;DROP TABLE&#x9;[#StoreCategoryChang]&#xA;GO&#xA;&#xA;--&#x9;select * from [#StoreCategoryChange] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Calculate open stores' category changing dates - part two&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;sto.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, cdt.[FiscalQuarterBeginDate])&#x9;AS&#x9;[O_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#StoreCategoryChange2]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#StoreCategoryChange]&#x9;&#x9;&#x9;&#x9;sto&#xA;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;(SELECT DISTINCT [FiscalQuarterNumOverall]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; FROM [Staging].[dbo].[vwCalendarShort])&#x9;cdt&#xA;&#x9;&#x9;&#x9;&#x9;  ON&#x9;cdt.[FiscalQuarterNumOverall]=sto.[O_ChgCatQtr]&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;DROP TABLE&#x9;[#StoreCategoryChange]&#xA;GO&#xA;&#xA;--&#x9;select * from [#StoreCategoryChange2] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Calculate closed store's category changing dates&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;CAST(sto.[StoreNum] AS INT)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, sto.[DateOfOpen])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, cdt.[FiscalQuarterBeginDate])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;cdt.[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;cdt.[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CASE&#x9;WHEN&#x9;cdt.[DayNumOfFiscalYear]&#x9;&gt;=&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;DATEADD(YY, 1, CONVERT(DATE, cdt.[YearBeginDate]))&#x9;&#x9;&#x9;END&#x9;AS&#x9;[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CASE&#x9;WHEN&#x9;cdt.[DayNumOfFiscalQuarter]&#x9;=&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;(cdt.[FiscalQuarterNumOverall] +5)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN&#x9;cdt.[DayNumOfFiscalQuarter]&#x9;&gt;&#x9;1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN&#x9;(cdt.[FiscalQuarterNumOverall]+6)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#x9;AS&#x9;[O_ChgCatQtr]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, [DateClosedPlusOne])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#ClosedStoreCategoryChange]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[Staging].[dbo].[StoreClosed]&#x9;&#x9;sto&#xA;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;[Staging].[dbo].[vwCalendarShort]&#x9;cdt&#xA;&#x9;&#x9;&#x9;&#x9;  ON&#x9;cdt.[FullDate]&#x9;&#x9;&#x9;=&#x9;&#x9;sto.[DateOfOpen]&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;--&#x9;select * from [#ClosedStoreCategoryChange] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Calculate open stores' category changing dates - part two&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;sto.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;CONVERT(DATE, cdt.[FiscalQuarterBeginDate])&#x9;AS&#x9;[O_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;sto.[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#ClosedStoreCategoryChange2]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#ClosedStoreCategoryChange]&#x9;&#x9;&#x9;&#x9;sto&#xA;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;(SELECT DISTINCT [FiscalQuarterNumOverall]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; FROM [Staging].[dbo].[vwCalendarShort])&#x9;cdt&#xA;&#x9;&#x9;&#x9;&#x9;  ON&#x9;cdt.[FiscalQuarterNumOverall]=sto.[O_ChgCatQtr]&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;&#xA;DROP TABLE&#x9;[#ClosedStoreCategoryChange]&#xA;GO&#xA;&#xA;--&#x9;select * from [#ClosedStoreCategoryChange2] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Union all open and closed stores puls adding date-store key for subsequent updates&#xA;&#xA;&#x9;&#x9;&#x9;  SELECT&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKopendate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKopener]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKprevdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKwebdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKpycat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[O_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKocat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[SDKcloseddate]&#xA;&#x9;&#x9;&#x9;&#x9;INTO&#x9;[#StoreCategoryChanges]&#xA;&#x9;&#x9;&#x9;&#x9;FROM&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[OpenDate],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKopendate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -1,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKopener]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -8,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKprevdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -42,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKwebdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[PY_ChgCat],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKpycat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[O_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[O_ChgCat],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKocat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[ClosedDate],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKcloseddate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#StoreCategoryChange2]&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UNION ALL&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreName]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[OpenDate],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKopendate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -1,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKopener]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -8,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKprevdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),DATEADD(DD, -42,[OpenDate]),112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKwebdate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[FiscalQuarterBeginDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalQuarter]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayNumOfFiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[PY_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[PY_ChgCat],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKpycat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[O_ChgCat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[O_ChgCat],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKocat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),[ClosedDate],112)+ '_' + REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;[SDKcloseddate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#ClosedStoreCategoryChange2]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#x9;AllTheStuff&#xA;&#x9;&#x9;&#x9;ORDER BY&#x9;3,1&#xA;&#x9;&#x9;GO&#xA;&#xA;DROP TABLE&#x9;[#StoreCategoryChange2]&#xA;GO&#xA;&#xA;DROP TABLE&#x9;[#ClosedStoreCategoryChange2]&#xA;GO&#xA;&#xA;--&#x9;select * from [#StoreCategoryChanges] order by 3,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Get the superset of combining dates and stores plus creating a date-store key for all available days&#xA;&#xA;CREATE TABLE&#x9;[#CalendarAndStore]&#xA;&#x9;&#x9;&#x9;&#x9;([DateOfBusiness]&#x9;DATE&#x9;&#x9;NULL,&#xA;&#x9;&#x9;&#x9;&#x9; [StoreID]&#x9;&#x9;&#x9;INT&#x9;&#x9;&#x9;NULL,&#xA;&#x9;&#x9;&#x9;&#x9; [StoDatKey]&#x9;&#x9;VARCHAR(16)&#x9;NULL)&#xA;GO&#xA;&#xA;&#xA;&#x9;DECLARE @StoreID&#x9;&#x9;INT&#xA;&#x9;DECLARE StoreIDCursor&#x9;CURSOR FOR&#x9;(SELECT [StoreID] FROM [#StoreCategoryChanges])&#xA;&#xA;&#x9;&#x9;OPEN StoreIDCursor&#xA;&#xA;&#x9;&#x9;FETCH NEXT FROM StoreIDCursor INTO @StoreID&#xA;&#xA;&#x9;&#x9;WHILE @@FETCH_STATUS = 0&#xA;&#x9;&#x9;BEGIN&#xA;&#xA;&#x9;&#x9;  INSERT INTO&#x9;[#CalendarAndStore]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#x9;[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoDatKey])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(  SELECT&#x9;CONVERT(DATE, cd.[FullDate])&#x9;&#x9;AS&#x9;&#x9;[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(CONVERT(VARCHAR(8),cd.[FullDate],112)+'_'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+REPLACE(STR([StoreID],4),' ','0'))&#x9;AS&#x9;&#x9;[StoDatKey]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; FROM&#x9;[Staging].[dbo].[vwCalendarShort]&#x9;cd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;[#StoreCategoryChanges]&#x9;&#x9;&#x9;&#x9;st&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE&#x9;st.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;@StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  AND&#x9;cd.[FullDate]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&gt;=&#x9;&#x9;DATEADD(DD, -42, st.[OpenDate])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  AND&#x9;cd.[CompanyHoliday]&#x9;&#x9;&#x9;&#x9;&#x9;IS&#x9;&#x9;NULL&#x9;)&#xA;&#xA;&#x9;&#x9;&#x9;FETCH NEXT FROM StoreIDCursor INTO  @StoreID&#xA;&#xA;&#x9;&#x9;END&#xA;&#xA;&#x9;CLOSE StoreIDCursor&#xA;&#x9;DEALLOCATE StoreIDCursor&#xA;&#x9;GO&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;DECLARE @StoreID&#x9;&#x9;INT&#xA;&#x9;DECLARE StoreIDCursor&#x9;CURSOR FOR&#x9;(SELECT [StoreID] FROM [#StoreCategoryChanges])&#xA;&#xA;&#x9;&#x9;OPEN StoreIDCursor&#xA;&#xA;&#x9;&#x9;FETCH NEXT FROM StoreIDCursor INTO @StoreID&#xA;&#xA;&#x9;&#x9;WHILE @@FETCH_STATUS = 0&#xA;&#x9;&#x9;BEGIN&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  DELETE&#x9;st&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;[#CalendarAndStore]&#x9;&#x9;&#x9;st&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JOIN&#x9;[#StoreCategoryChanges]&#x9;&#x9;sc&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  On&#x9;st.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;sc.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   WHERE&#x9;st.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;@StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; AND&#x9;st.[DateOfBusiness]&#x9;&#x9;&#x9;&#x9;&gt;=&#x9;&#x9;DATEADD(MM, 24, sc.[ClosedDate])&#xA;&#xA;&#x9;&#x9;&#x9;FETCH NEXT FROM StoreIDCursor INTO  @StoreID&#xA;&#xA;&#x9;&#x9;END&#xA;&#xA;&#x9;CLOSE StoreIDCursor&#xA;&#x9;DEALLOCATE StoreIDCursor&#xA;&#x9;GO&#xA;&#xA;&#xA;--&#x9;DELETE FROM [#CalendarAndStore] WHERE CONVERT(DATE, [DateOfBusiness]) &lt; CONVERT(DATE, DATEADD(YY, -7.1, GETDATE()))&#xA;--&#x9;GO&#xA;&#xA;&#x9;DELETE FROM [#CalendarAndStore] WHERE CONVERT(DATE, [DateOfBusiness]) &gt; CONVERT(DATE, DATEADD(MM, 24, GETDATE()))&#xA;&#x9;GO&#xA;&#xA;&#xA;CREATE CLUSTERED INDEX [ClusteredIndex-StoDatKey] ON [#CalendarAndStore]&#xA;(&#xA;&#x9;[StoDatKey]&#xA;)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)&#xA;ON [PRIMARY]&#xA;GO&#xA;&#xA;--&#x9;select * from [#CalendarAndStore] order by 1,2&#xA;--&#x9;select * from [#CalendarAndStore] where storeid in (618,638,664,669) order by 1,2&#xA;--&#x9;select COUNT(*) from [#CalendarAndStore]&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Get the superset of combining dates and stores dimension with other store metadata&#xA;&#xA;&#x9;&#x9;   SELECT&#x9;cs.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cs.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;CAST(NULL AS CHAR(6))&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[Category]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cd.[FiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cd.[Quarter]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[Quarter]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cd.[Period]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cd.[SubPeriods]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[SubPeriod]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;CAST(SUBSTRING(cd.[WeekInPeriod], 6, 1) AS INT)&#x9;&#x9;AS&#x9;[Week]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cd.[Day]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[DayOfWeek]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cs.[StoDatKey]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKopendate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKopener]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKprevdate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKwebdate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKpycat]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKocat]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[SDKcloseddate]&#xA;&#x9;&#x9;&#x9; INTO&#x9;[#CalendarAndStores]&#xA;&#x9;&#x9;&#x9; FROM&#x9;[#CalendarAndStore]&#x9;&#x9;&#x9;&#x9;&#x9;cs&#xA;&#x9;&#x9;&#x9; JOIN&#x9;[Staging].[dbo].[vwCalendarShort]&#x9;cd&#xA;&#x9;&#x9;&#x9;   ON&#x9;cd.[FullDate]&#x9;=&#x9;cs.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9; JOIN&#x9;[#StoreCategoryChanges]&#x9;&#x9;&#x9;&#x9;st&#xA;&#x9;&#x9;&#x9;   ON&#x9;st.[StoreID]&#x9;=&#x9;cs.[StoreID]&#xA;&#x9;&#x9; ORDER BY&#x9;cs.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;cs.[StoreID]&#xA;&#x9;&#x9;GO&#xA;&#xA;&#xA;DROP TABLE&#x9;[#StoreCategoryChanges]&#xA;GO&#xA;&#xA;DROP TABLE&#x9;[#CalendarAndStore]&#xA;GO&#xA;&#xA;--&#x9;select * from [#CalendarAndStores] where storeid &gt; 306 order by 2,1&#xA;--&#x9;select * from [#CalendarAndStores] where category is null order by 2,1&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Update Store's catagories based on above's calculation&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'F'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;BETWEEN&#x9;&#x9;[SDKopendate]&#x9;AND&#x9;&#x9;[SDKpycat]&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'N'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;BETWEEN&#x9;&#x9;[SDKpycat]&#x9;&#x9;AND&#x9;&#x9;[SDKocat]&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'O'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;&gt;=&#x9;&#x9;&#x9;[SDKocat]&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'C'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;&gt;=&#x9;&#x9;&#x9;[SDKcloseddate]&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'P'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;BETWEEN&#x9;&#x9;[SDKprevdate]&#x9;AND&#x9;[SDKopener]&#xA;&#xA;&#x9;&#x9;   UPDATE&#x9;[#CalendarAndStores]&#x9;SET&#x9;&#x9;[Category]&#x9;&#x9;=&#x9;&#x9;&#x9;'W'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE&#x9;&#x9;[StoDatKey]&#x9;&#x9;BETWEEN&#x9;&#x9;[SDKwebdate]&#x9;AND&#x9;[SDKprevdate]&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Account for legitimate store closings&#xA;&#xA;&#x9;&#x9;   SELECT&#x9;(CONVERT(VARCHAR(8),DateOfBusiness,112)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+'_'+REPLACE(STR(StoreID,4),' ','0'))&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;[StoDatKey]&#xA;&#x9;&#x9;&#x9; INTO&#x9;[#StoreClosings]&#xA;&#x9;&#x9;&#x9; FROM&#x9;[Audit].[dbo].[BusinessClosures]&#xA;&#x9;&#x9;GO&#xA;&#xA;--&#x9;select * from [#StoreClosings] order by 1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Delete this dimension table if it exists&#xA;&#xA;&#x9;IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[CalendarAndStore]'))&#xA;&#x9;DROP TABLE [dbo].[CalendarAndStore]&#xA;&#x9;GO&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Exclude legitimate store closings&#xA;&#xA;&#x9;&#x9;&#x9;SELECT&#x9;[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;LTRIM(RTRIM([Category])) AS [Category]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[ClosedDate]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[FiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[Quarter]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[Period]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[SubPeriod]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[Week]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[DayOfWeek]&#xA;&#x9;&#x9;&#x9; INTO&#x9;[dbo].[CalendarAndStore]&#xA;&#x9;&#x9;&#x9; FROM&#x9;[#CalendarAndStores]&#xA;&#x9;&#x9;&#x9;WHERE&#x9;[StoDatKey]&#x9;&#x9;&#x9;&#x9;NOT IN&#x9;&#x9;(SELECT * FROM [#StoreClosings])&#xA;&#x9;&#x9; ORDER BY&#x9;[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;[StoreID]&#xA;&#x9;&#x9; GO&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Create an index in this dimension to improve performance&#xA;&#xA;CREATE CLUSTERED INDEX [ClusteredIndex-DateOfBusiness-StoreID] ON [dbo].[CalendarAndStore]&#xA;(&#xA;&#x9;[DateOfBusiness] ASC,&#xA;&#x9;[StoreID] ASC&#xA;)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]&#xA;GO&#xA;&#xA;&#xA;--&#x9;SELECT * FROM CalendarAndStore ORDER BY 2,1&#xA;--&#x9;SELECT * FROM CalendarAndStore where storeid in (618,638,664,669) ORDER BY 1,2&#xA;--&#x9;SELECT * FROM CalendarAndStore where storeid in (123,569,319,457) ORDER BY 2,1&#xA;--&#x9;SELECT * FROM CalendarAndStore where storeid in (318,319,320,321) ORDER BY 2,1&#xA;&#xA;&#xA;--&#x9;&#x9;----------------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Drop the temporary tables created for this process&#xA;&#xA;DROP TABLE&#x9;[#CalendarAndStores]&#xA;GO&#xA;&#xA;DROP TABLE&#x9;[#StoreClosings]&#xA;GO&#xA;&#xA;&#xA;--imp&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Create Sales and Guest"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{b21e3af3-5169-40a6-897d-3ed7b73ca1b1}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create Sales and Guest"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; Â© 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FE47E1E0-FF89-4FB8-A71C-1846B6D6091C}"
          SQLTask:SqlStatementSource="--&#xA;--&#x9;---------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;Run in:&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HQ-FINSQL-01&#xA;--&#x9;&#x9;Scheduled to run daily at 8:00 AM as job:&#x9;DW - 8a -Comparative Analysis of Sales, Guest &amp; SalesMix&#xA;--&#x9;---------------------------------------------------------------------------------------------------------&#xA;&#xA;USE DW&#xA;GO&#xA;&#xA;&#xA;--&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where [Sales Date] &gt; '2013-12-29 order by [Sales Date], StoreID&#xA;--&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where [Sales Date] &gt; '2013-12-29' order by StoreID, [Sales Date]&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Select into temps different sales categories from AlohaInsight from FY2010 to date. Distinct to avoid duplicates&#xA;&#xA; &#x9;DECLARE @FiscalYear  AS INT&#xA;&#x9;DECLARE @FYStartDate AS DATE&#xA;&#xA;&#x9;SET&#x9;@FiscalYear = (SELECT ([YearNum]-1) FROM [Staging].[dbo].[CalendarDataSet] WHERE CONVERT(DATE,[FullDate]) = CONVERT(DATE,GETDATE()))&#xA;&#x9;SET&#x9;@FYStartDate=(SELECT DISTINCT [FiscalYearBeginDate]&#x9;FROM [Staging].[dbo].[CalendarDataSet] WHERE [FiscalYearNum] = @FiscalYear)&#xA;&#xA;&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[Amount]          INTO #DHSS_10_GuestCounts&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 10&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_1000_Food&#x9;&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 1000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_2000_Liquor&#x9;&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 2000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_3000_Wine&#x9;&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 3000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_4000_DraftBeer&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 4000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_5000_BottledBeer FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 5000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[TypeID],[Amount] INTO #DHSS_1_6000_NaBeverages FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 1 AND [TypeID] = 6000&#xA;&#x9; SELECT DISTINCT [DateOfBusiness],[FKStoreID],[Type],[Amount]          INTO #DHSS_33_IncludedTax&#x9; FROM [DW].[dbo].[dpvHstSalesSummary] WHERE&#x9;DateOfBusiness &gt;= @FYStartDate AND [Type] = 33&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;&#x9;Union all all food and beverages sales categories from temp tables of step above&#xA;&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] INTO #AllSalesSummary FROM #DHSS_1_1000_Food UNION ALL&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] FROM #DHSS_1_2000_Liquor UNION ALL&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] FROM #DHSS_1_3000_Wine UNION ALL&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] FROM #DHSS_1_4000_DraftBeer UNION ALL&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] FROM #DHSS_1_5000_BottledBeer UNION ALL&#xA;&#x9; SELECT [DateOfBusiness],[FKStoreID],[Type],[Amount] FROM #DHSS_1_6000_NaBeverages&#xA;&#x9; GO&#xA;&#xA;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AllSalesSummary(DateOfBusiness,FKStoreID)&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Food sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightFoodSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_1000_Food&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightFoodSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_1000_Food&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Liquor sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightLiquorSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_2000_Liquor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightLiquorSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_2000_Liquor&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Wine sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightWineSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_3000_Wine&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightWineSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_3000_Wine&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Draft Beer sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightDraftBeerSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_4000_DraftBeer&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightDraftBeerSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_4000_DraftBeer&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Bottled Beer sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightBottledBeerSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_5000_BottledBeer&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightBottledBeerSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_5000_BottledBeer&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Non Alcoholic Beverages sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightNaBeveragesSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_1_6000_NaBeverages&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightNaBeveragesSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_1_6000_NaBeverages&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum all Food and Beverages sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightRawSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#AllSalesSummary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightRawSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#AllSalesSummary&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Included Taxes and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;IncludedTaxes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightIncludedTaxes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_33_IncludedTax&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightIncludedTaxes(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_33_IncludedTax&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Substract Included Taxes from all Food and Beverages sales and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT&#x9;&#x9;s1.DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;s1.StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;(s1.TotalSales - ISNULL(s2.IncludedTaxes, 0))&#x9;AS&#x9;TotalSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  INTO&#x9;&#x9;#AlohaInsightSales&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  FROM&#x9;&#x9;#AlohaInsightRawSales&#x9;&#x9;&#x9;&#x9;&#x9;s1&#xA;&#x9;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightIncludedTaxes&#x9;&#x9;&#x9;&#x9;s2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;s2.DateOfBusiness&#x9;=&#x9;s1.DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;s2.StoreID&#x9;&#x9;&#x9;=&#x9;s1.StoreID&#xA;&#x9;&#x9;&#x9;&#x9;  ORDER BY&#x9;&#x9;s1.DateOfBusiness,&#x9;s1.StoreID&#xA;&#x9;&#x9;&#x9;&#x9;  GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightSales(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightRawSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightIncludedTaxes&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Sum Guest Counts and group by date and store into a temp table&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  SELECT&#x9;CONVERT(Date, DateOfBusiness)&#x9;&#x9;&#x9;AS&#x9;DateOfBusiness&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;FKStoreID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;StoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM([AMOUNT])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;TotalGuests&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTO&#x9;#AlohaInsightGuestCounts&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM&#x9;#DHSS_10_GuestCounts&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GROUP BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ORDER BY&#x9;DateOfBusiness,&#x9;FKStoreID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#AlohaInsightGuestCounts(DateOfBusiness,StoreID)&#xA;&#x9;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA;&#x9;DROP TABLE&#x9;#DHSS_10_GuestCounts&#xA;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Main table that draws sales data by category from different sources for comparison and analys.&#xA; &#xA; &#xA; USE Audit&#xA; GO&#xA;&#xA;&#x9;IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[SalesGuestLaborComparativeAnalysis]'))&#xA;&#x9;DROP TABLE [dbo].[SalesGuestLaborComparativeAnalysis] &#xA;&#x9;GO&#xA;&#xA;&#xA;USE DW&#xA;GO&#xA;&#xA;&#xA;&#x9;&#x9;DECLARE @FiscalYear  AS INT&#xA;&#x9;&#x9;DECLARE @FYStartDate AS DATE&#xA;&#xA;&#x9;&#x9;SET&#x9;@FiscalYear = (SELECT ([YearNum]-1) FROM [Staging].[dbo].[CalendarDataSet] WHERE CONVERT(DATE,[FullDate]) = CONVERT(DATE,GETDATE()))&#xA;&#x9;&#x9;SET&#x9;@FYStartDate=(SELECT DISTINCT [FiscalYearBeginDate]&#x9;FROM [Staging].[dbo].[CalendarDataSet] WHERE [FiscalYearNum] = @FiscalYear)&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT&#x9;&#x9;--DISTINCT&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aa.[FiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;STR(aa.[FiscalYear], 4) + '_P-' +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;REPLACE(STR(aa.[Period], 2), ' ', '0')&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Year &amp; Period]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;REPLACE(STR(aa.Period,2),' ','0')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Period]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;'p' + REPLACE(STR(aa.Period,2),' ','0') + '-' + &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'w' + STR(aa.[Week],1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Period Week]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;STR(aa.[FiscalYear],4) + '-' + &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'p' + REPLACE(STR(aa.Period,2),' ','0') + '-' + &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'w' + STR(aa.[Week],1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Yr-Prd-Wk]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[SubPeriod]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[DateOfBusiness]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Sales Date]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;REPLACE(STR(aa.[StoreID] ,4), ' ', '0')&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;st.[StoreName] + ' - ' + '0' + st.[StoreNum]&#x9;&#x9;&#x9;AS&#x9;&#x9;[Store Name - ID]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[OpenDate]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[Category]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Cat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;''''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(ai.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AlohaIns_TLsales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(ex.[totalsales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[DSR_Rprt_TLsales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[totalsales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[DSR_Cube_TLsales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[totalsales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_Cube_TLsales]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(ai.[totalsales],0) - ISNULL(ex.[totalsales],0)&#x9;AS&#x9;&#x9;[AI-DSR_Rp_SLdiff]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(ai.[totalsales],0) - ISNULL(cb.[totalsales],0)&#x9;AS&#x9;&#x9;[AI-DSR_Cb_SLdiff]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(ai.[totalsales],0) - ISNULL(sr.[totalsales],0)&#x9;AS&#x9;&#x9;[AI-DSR_ML_SLdiff]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;'.'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(rd.[TotalGuests], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AlohaIns_TLguests]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(CAST(ex.TotalGuests AS INT), '')&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[DSR_Rprt_TLguests]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.CustomerCount, '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[DSR_Cube_TLguests]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.CustomerCount, '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_Cube_TLguests]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(rd.[TotalGuests],0)-ISNULL(ex.[TotalGuests], 0)&#x9;AS&#x9;&#x9;[AI-DSR_Rp_GSdiff]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(rd.[TotalGuests],0)-ISNULL(cb.CustomerCount, 0)&#x9;AS&#x9;&#x9;[AI-DSR_Cb_GSdiff]&#xA;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;,&#x9;ISNULL(rd.[TotalGuests],0)-ISNULL(sr.CustomerCount, 0)&#x9;AS&#x9;&#x9;[AI-DSR_ML_GSdiff]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;','&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(fs.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_FoodSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales1], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_FoodSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Food Sales-S1], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_FoodSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;';'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(ls.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_LiquorSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales2], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_LiquorSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Liquor Sales-S2], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_LiquorSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;':'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(ws.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_WineSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales3], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_WineSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Wine Sales-S3], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_WineSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;'^'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(dbs.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_DraftBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales4], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_DraftBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Draft Beer Sales-S4], '')&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_DraftBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;'~'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(bbs.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_BottledBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales5], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_BottledBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Bottled Beer Sales-S5], '')&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_BottledBeerSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;'`'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(nabs.[TotalSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[AI_NaBeveragesSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sr.[Sales6], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_NaBeveragesSales]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(cb.[Beverage Sales-S6], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[CB_NaBeveragesSales]&#xA;&#x9;&#x9;&#x9;&#x9;  INTO&#x9;&#x9;[Audit].[dbo].[SalesGuestLaborComparativeAnalysis]&#xA;&#x9;&#x9;&#x9;&#x9;  FROM&#x9;&#x9;[Staging].[dbo].[CalendarAndStore]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aa&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;[DW].[dbo].[StoreList]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;st&#xA;&#x9;&#x9;&#x9;&#x9;    ON&#x9;&#x9;st.[StoreNum]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;REPLACE(STR(aa.[StoreID],3),' ','0')&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ai&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;ai.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;ai.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightGuestCounts&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;rd.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;rd.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;dailysalesreport.dbo.dailysalesregister&#x9;&#x9;&#x9;&#x9;&#x9;ex&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;ex.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;ex.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;[dailysalescube].[dbo].[vwSalesRegisterComplete]&#x9;&#x9;cb&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;cb.[salesdate]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;cb.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;[MLHQ].[dbo].[ST_Register]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sr&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;sr.[salesdate]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;sr.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightFoodSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;fs.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;fs.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightLiquorSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ls&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;ls.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;ls.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightWineSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ws&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;ws.[DateOfBusiness]&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;ws.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightDraftBeerSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dbs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;dbs.[DateOfBusiness]&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;dbs.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightBottledBeerSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bbs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;bbs.[DateOfBusiness]&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;bbs.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#AlohaInsightNaBeveragesSales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nabs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;nabs.[DateOfBusiness]&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;nabs.[StoreID]&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9;&#x9;aa.[DateOfBusiness]&#x9;&#x9;BETWEEN&#x9;&#x9;@FYStartDate&#x9;&#x9;AND&#x9;&#x9;(GETDATE()-2)&#xA;&#x9;&#x9;GO&#xA;&#xA;&#xA;/*&#xA;&#x9;SELECT * FROM [Staging].[dbo].[CalendarAndStore] where storeid = 12 and [dateofbusiness] between '2014-09-01' and '2014-09-07' order by 1&#xA;&#x9;select * from [DailySalesCube].[dbo].[SalesRegisterComplete] where storeid = '012' and [salesdate] between '2014-09-01' and '2014-09-07' order by 6,5&#xA;&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where storeid = '012' and [sales date] between '2014-09-01' and '2014-09-07' order by [Sales Date]&#xA;&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where storeid = 622 and [sales date] between '2013/04/22' and '2013/12/30' order by [Sales Date]&#xA;&#x9;select * from [DailySalesCube].[dbo].[SalesRegisterComplete] where storeid = 622 and [salesdate] between '2013-04-22' and '2013-12-30' order by 6,5&#xA;&#x9;select * from [DW].[dbo].[dpvHstSalesSummary] where fkstoreid = 622 and [dateofbusiness] between '2013-04-22' and '2013-12-30' order by 6,5&#xA;&#x9;select * from [MLHQ].[dbo].[ST_Register] where storeid = 622 and [salesdate] between '2013-04-22' and '2013-12-30' order by 1,3&#xA;&#x9;select * from [dailysalesreport].[dbo].[dailysalesregister] where storeid = 622 and [dateofbusiness] between '2013-04-22' and '2013-12-30' order by 1,2&#xA;*/&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Drop last of all created temporary tables&#xA; &#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightFoodSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightLiquorSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightWineSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightDraftBeerSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightBottledBeerSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightNaBeveragesSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightSales&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#AlohaInsightGuestCounts&#xA;&#x9;GO&#xA;&#x9;&#xA;&#xA;--&#x9;----imp&#xA;&#xA;/*&#xA;--   -----------------------------------------------------------------------------------------------&#xA;--    Run in:    HQ-FINSQL-01&#xA;&#xA;DECLARE  @FsclYear1   AS  INT&#xA;DECLARE  @Str_YrPrdWk AS  VARCHAR(12)&#xA;DECLARE  @End_YrPrdWk AS  VARCHAR(12)&#xA;&#xA;SET    &#x9; @FsclYear1    =  (SELECT CASE WHEN&#x9;[Period] = 1 THEN ([FiscalYear]-2) ELSE [FiscalYear]-1 END &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   FROM [Staging].[dbo].[vwCalendarShort] WHERE [FullDate] = CONVERT(DATE,GETDATE()))&#xA;SET      @Str_YrPrdWk  =  STR(@FsclYear1, 4) + '-p01-w1' &#xA;SET      @End_YrPrdWk  =  (SELECT [Yr-Prd-Wk] FROM [Staging].[dbo].[vwCalendarShort] WHERE [FullDate] = CONVERT(DATE,(GETDATE()-7)))&#xA;&#xA;&#xA;        SELECT [FiscalYear]&#xA;              ,[Year &amp; Period]&#xA;              ,[Period]&#xA;              ,[Period Week]&#xA;              ,[SubPeriod]&#xA;              ,[Sales Date]&#xA;              ,[Yr-Prd-Wk]&#xA;              ,[StoreID]&#xA;              ,[Store Name - ID]&#xA;              ,[OpenDate]&#xA;              ,[Cat]&#xA;              ,[AI_FoodSales]&#xA;              ,[ML_FoodSales]&#xA;              ,[AI_NaBeveragesSales]&#xA;              ,[ML_NaBeveragesSales]&#xA;          FROM [Audit].[dbo].[SalesGuestLaborComparativeAnalysis]&#xA;         WHERE [Yr-Prd-Wk]         BETWEEN   @Str_YrPrdWk  AND  @End_YrPrdWk&#xA;           AND [StoreID]                &lt;    750                   -- No burger works&#xA;           AND ([ML_FoodSales]          &lt;&gt;   [AI_FoodSales]&#x9;       -- ML not equal to Aloha Insight&#xA;            OR  [ML_NaBeveragesSales]   &lt;&gt;   [AI_NaBeveragesSales])-- same&#xA;           AND ([AI_FoodSales]          &gt;    0                     -- Aloha Insight with real Sales&#xA;            OR  [AI_NaBeveragesSales]   &gt;    0)                    -- same&#xA;      ORDER BY [Sales Date] DESC&#xA;              ,[StoreID]&#xA;&#xA;&#xA;        SELECT DISTINCT&#xA;               [Yr-Prd-Wk]&#xA;              ,[StoreID]&#xA;              ,[Store Name - ID]&#xA;              ,[SubPeriod]&#xA;&#x9;&#x9;  INTO #StoreExceptions&#xA;          FROM [Audit].[dbo].[SalesGuestLaborComparativeAnalysis]&#xA;         WHERE [Yr-Prd-Wk]         BETWEEN   @Str_YrPrdWk  AND  @End_YrPrdWk&#xA;           AND [StoreID]                &lt;    750                   -- No burger works&#xA;           AND ([ML_FoodSales]          &lt;&gt;   [AI_FoodSales]&#x9;       -- ML not equal to Aloha Insight&#xA;            OR  [ML_NaBeveragesSales]   &lt;&gt;   [AI_NaBeveragesSales])-- same&#xA;           AND ([AI_FoodSales]          &gt;    0                     -- Aloha Insight with real Sales&#xA;            OR  [AI_NaBeveragesSales]   &gt;    0)                    -- same&#xA;      ORDER BY [SubPeriod] DESC&#xA;              ,[StoreID]&#xA;&#xA;&#xA;        SELECT * FROM #StoreExceptions ORDER BY [SubPeriod] DESC, [StoreID]&#xA;&#xA;&#xA;        SELECT [Yr-Prd-Wk], COUNT([StoreID]) AS [Stores]&#xA;          FROM #StoreExceptions&#xA;      GROUP BY [Yr-Prd-Wk]&#xA;      ORDER BY [Yr-Prd-Wk] DESC&#xA;&#xA;&#xA;    DROP TABLE #StoreExceptions&#xA;&#xA;--   -----------------------------------------------------------------------------------------------&#xA;*/&#xA;&#xA;--" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Create Sales Mix"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{85be5d3d-c0c5-4f6c-935b-62a58da0f62a}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create Sales Mix"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; Â© 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FE47E1E0-FF89-4FB8-A71C-1846B6D6091C}"
          SQLTask:SqlStatementSource="--&#xA;--&#x9;---------------------------------------------------------------------------------------------------------&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Run in:&#x9;&#x9;&#x9;HQ-FINSQL-01&#xA;--&#x9;&#x9;&#x9;Scheduled to run daily at 2:00 AM at the end of ML Relevant data SSIS solution&#xA;--&#x9;---------------------------------------------------------------------------------------------------------&#xA;&#xA;USE DW&#xA;GO&#xA;&#xA;&#xA;--&#x9;select * from Audit.dbo.[SalesMixComparativeAnalysis] where [Sales Date] &gt;= '2014/01/01' order by [Sales Date], StoreID&#xA;--&#x9;select * from Audit.dbo.[SalesMixComparativeAnalysis] where [Sales Date] &gt;= '2014/01/01' order by StoreID, [Sales Date]&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Select into temps different sales categories from AlohaInsight from FY2010 to date. Distinct to avoid duplicates&#xA;&#xA;&#x9;&#x9;   SELECT&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[TotalNumberSold], 0))&#x9;AS&#x9;&#x9;[QtySold]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[SellingPrice], 0))&#x9;&#x9;AS&#x9;&#x9;[SellingPrice]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[NetSales], 0))&#x9;&#x9;&#x9;AS&#x9;&#x9;[TotalNetSales]&#xA;&#x9;&#x9;&#x9; INTO&#x9;#SalesMix_Beverages&#xA;&#x9;&#x9;&#x9; FROM&#x9;[MLHQ].[dbo].[ST_SalesMix]&#x9;&#x9;&#x9;&#x9;sm&#xA;  LEFT OUTER JOIN&#x9;[MLAddOn].[dbo].[Menu_Items]&#x9;&#x9;&#x9;&#x9;&#x9;mi&#xA;&#x9;&#x9;&#x9;   ON&#x9;mi.[MenuItemID]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;WHERE&#x9;mi.[MenuItemCatType]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;'Beverage'&#xA;&#x9;&#x9;&#x9;  AND&#x9;sm.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&gt;&#x9;&#x9;'2013-12-29'&#xA;&#x9;&#x9; GROUP BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9; ORDER BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#SalesMix_Beverages (SalesMixDate,StoreID)&#xA;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Select into temps different sales categories from AlohaInsight from FY2010 to date. Distinct to avoid duplicates&#xA;&#xA;&#x9;&#x9;   SELECT&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[TotalNumberSold], 0))&#x9;AS&#x9;&#x9;[QtySold]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[SellingPrice], 0))&#x9;&#x9;AS&#x9;&#x9;[SellingPrice]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[NetSales], 0))&#x9;&#x9;&#x9;AS&#x9;&#x9;[TotalNetSales]&#xA;&#x9;&#x9;&#x9; INTO&#x9;#SalesMix_Food&#xA;&#x9;&#x9;&#x9; FROM&#x9;[MLHQ].[dbo].[ST_SalesMix]&#x9;&#x9;&#x9;&#x9;sm&#xA;  LEFT OUTER JOIN&#x9;[MLAddOn].[dbo].[Menu_Items]&#x9;&#x9;&#x9;&#x9;&#x9;mi&#xA;&#x9;&#x9;&#x9;   ON&#x9;mi.[MenuItemID]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;WHERE&#x9;mi.[MenuItemCatType]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;'Food'&#xA;&#x9;&#x9;&#x9;  AND&#x9;sm.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&gt;&#x9;&#x9;'2013-12-29'&#xA;&#x9;&#x9; GROUP BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9; ORDER BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#SalesMix_Food (SalesMixDate,StoreID)&#xA;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Select into temps different sales categories from AlohaInsight from FY2010 to date. Distinct to avoid duplicates&#xA;&#xA;&#x9;&#x9;   SELECT&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[TotalNumberSold], 0))&#x9;AS&#x9;&#x9;[QtySold]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[SellingPrice], 0))&#x9;&#x9;AS&#x9;&#x9;[SellingPrice]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;SUM(ISNULL(sm.[NetSales], 0))&#x9;&#x9;&#x9;AS&#x9;&#x9;[TotalNetSales]&#xA;&#x9;&#x9;&#x9; INTO&#x9;#SalesMix_Other&#xA;&#x9;&#x9;&#x9; FROM&#x9;[MLHQ].[dbo].[ST_SalesMix]&#x9;&#x9;&#x9;&#x9;sm&#xA;  LEFT OUTER JOIN&#x9;[MLAddOn].[dbo].[Menu_Items]&#x9;&#x9;&#x9;&#x9;&#x9;mi&#xA;&#x9;&#x9;&#x9;   ON&#x9;mi.[MenuItemID]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;&#x9;WHERE&#x9;mi.[MenuItemCatType]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;'Other'&#xA;&#x9;&#x9;&#x9;  AND&#x9;sm.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&gt;&#x9;&#x9;'2013-12-29'&#xA;&#x9;&#x9; GROUP BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9; ORDER BY&#x9;sm.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;,&#x9;sm.[SalesMixDate]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;mi.[MenuItemCatName]&#xA;&#x9;&#x9;--&#x9;&#x9;,&#x9;sm.[MenuItemID]&#xA;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;&#x9;CREATE CLUSTERED INDEX IDX_C_DateStore&#x9;ON&#x9;#SalesMix_Other (SalesMixDate,StoreID)&#xA;&#x9;&#x9;&#x9;GO&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Main table that draws sales data by category from different sources for comparison and analys.&#xA; &#xA; &#xA; USE Audit&#xA; GO&#xA;&#xA;&#x9;IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[SalesMixComparativeAnalysis]'))&#xA;&#x9;DROP TABLE [dbo].[SalesMixComparativeAnalysis] &#xA;&#x9;GO&#xA;&#xA;USE DW&#xA;GO&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT&#x9;&#x9;DISTINCT&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aa.[FiscalYear]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;STR(aa.[FiscalYear], 4) + '_P-' +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;REPLACE(STR(aa.[Period], 2), ' ', '0')&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Year &amp; Period]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;REPLACE(STR(aa.Period,2),' ','0')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Period]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;'p' + REPLACE(STR(aa.Period,2),' ','0') + '-' + &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'w' + STR(aa.[Week],1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Period Week]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[DateOfBusiness]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Sales Date]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;'0' + st.[StoreNum] + ' - ' + st.[StoreName]&#x9;&#x9;&#x9;AS&#x9;&#x9;[Store ID - Name]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[DayOfWeek]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;aa.[Category]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[Cat]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;','&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sf.[QtySold], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_QtySold_Food]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sf.[SellingPrice], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_SellingPrice_Food]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sf.[TotalNetSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_TotalNetSales_Food]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;'.'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sb.[QtySold], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_QtySold_Bev]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sb.[SellingPrice], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_SellingPrice_Bev]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(sb.[TotalNetSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_TotalNetSales_Bev]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;''''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(so.[QtySold], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_QtySold_Oth]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(so.[SellingPrice], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_SellingPrice_Oth]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,&#x9;ISNULL(so.[TotalNetSales], '')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AS&#x9;&#x9;[ML_TotalNetSales_Oth]&#xA;&#x9;&#x9;&#x9;&#x9;  INTO&#x9;&#x9;[Audit].[dbo].[SalesMixComparativeAnalysis]&#xA;&#x9;&#x9;&#x9;&#x9;  FROM&#x9;&#x9;[Staging].[dbo].[CalendarAndStore]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aa&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;[DW].[dbo].[StoreList]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;st&#xA;&#x9;&#x9;&#x9;&#x9;    ON&#x9;&#x9;st.[StoreNum]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;REPLACE(STR(aa.[StoreID],3),' ','0')&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#SalesMix_Beverages&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sb&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;sb.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;sb.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#SalesMix_Food&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sf&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;sf.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;sf.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;#SalesMix_Other&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;so&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;so.[StoreID]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;so.[SalesMixDate]&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;   LEFT OUTER JOIN&#x9;&#x9;[SalesMixCube].[dbo].[vSalesMix]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cb&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ON&#x9;&#x9;cb.[Sales date]&#x9;&#x9;&#x9;&#x9;&#x9;=&#x9;&#x9;&#x9;aa.[DateOfBusiness]&#xA;&#x9;&#x9;&#x9;&#x9;   AND&#x9;&#x9;CAST(cb.[Restaurant ID] AS INT)&#x9;=&#x9;&#x9;&#x9;aa.[StoreID]&#xA;&#x9;&#x9;&#x9;&#x9; WHERE&#x9;&#x9;aa.[DateOfBusiness]&#x9;&#x9;&#x9;&#x9;BETWEEN&#x9;&#x9;'2009-12-28'&#x9;AND&#x9;&#x9;(GETDATE()-2)&#xA;&#x9;&#x9;GO&#xA;&#xA;&#xA;/*&#xA;&#x9;SELECT * FROM [Staging].[dbo].[CalendarAndStore] where storeid = 12 and [dateofbusiness] between '2014-09-01' and '2014-09-07' order by 1&#xA;&#x9;select * from [DailySalesCube].[dbo].[SalesRegisterComplete] where storeid = '012' and [salesdate] between '2014-09-01' and '2014-09-07' order by 6,5&#xA;&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where storeid = '012' and [sales date] between '2014-09-01' and '2014-09-07' order by [Sales Date]&#xA;&#x9;select * from Audit.dbo.SalesGuestLaborComparativeAnalysis where storeid = 622 and [sales date] between '2013/04/22' and '2013/12/30' order by [Sales Date]&#xA;&#x9;select * from [DailySalesCube].[dbo].[SalesRegisterComplete] where storeid = 622 and [salesdate] between '2013-04-22' and '2013-12-30' order by 6,5&#xA;&#x9;select * from [DW].[dbo].[dpvHstSalesSummary] where fkstoreid = 622 and [dateofbusiness] between '2013-04-22' and '2013-12-30' order by 6,5&#xA;&#x9;select * from [MLHQ].[dbo].[ST_Register] where storeid = 622 and [salesdate] between '2013-04-22' and '2013-12-30' order by 1,3&#xA;&#x9;select * from [dailysalesreport].[dbo].[dailysalesregister] where storeid = 622 and [dateofbusiness] between '2013-04-22' and '2013-12-30' order by 1,2&#xA;*/&#xA;&#xA;&#xA; --&#x9;--------------------------------------------------------------------------------------------------------------------&#xA; --&#x9;&#x9;Drop all created temporary tables&#xA; &#xA;&#x9;DROP TABLE&#x9;#SalesMix_Other&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#SalesMix_Food&#xA;&#x9;GO&#xA;&#xA;&#x9;DROP TABLE&#x9;#SalesMix_Beverages&#xA;&#x9;GO&#xA;&#xA;&#xA;--&#xA;&#xA;&#xA;/*&#xA;--&#x9;Shows stores/dates with zero sales mix data for the last 62 days&#xA;  SELECT [Year &amp; Period]&#xA;        ,[Period Week]&#xA;        ,[Sales Date]&#xA;        ,[Store ID - Name]&#xA;        ,[ML_QtySold_Food]&#xA;        ,[ML_QtySold_Bev]&#xA;        ,[ML_QtySold_Oth]&#xA;    FROM [Audit].[dbo].[SalesMixComparativeAnalysis]&#xA;   WHERE [Sales Date]      &gt;  (GETDATE()-62)&#xA;     AND SUBSTRING([Store ID - Name],2,3) NOT IN (SELECT StoreNum FROM Staging.dbo.StoreClosed)&#xA;&#x9; AND [OpenDate]        &lt;  (GETDATE()-62)&#xA;&#x9; AND [Cat]             IN ('O','N','F')&#xA;     AND([ML_QtySold_Food] &lt;  1&#xA;      OR [ML_QtySold_Bev]  &lt;  1)&#xA;ORDER BY [Store ID - Name]&#xA;        ,[Sales Date]&#xA;&#xA;&#xA;--&#x9;Shows stores/dates with zero guests and sales detail data for the last 92 days&#xA;  SELECT [Year &amp; Period]&#xA;        ,[Period Week]&#xA;        ,[Sales Date]&#xA;        ,[Store ID - Name]&#xA;        ,[ML_Cube_TLsales]&#xA;        ,[ML_Cube_TLguests]&#xA;        ,[ML_FoodSales]&#xA;        ,([ML_LiquorSales]+[ML_WineSales]+[ML_DraftBeerSales]+[ML_BottledBeerSales]) AS ML_LiquorSales&#xA;        ,[ML_NaBeveragesSales]&#xA;    FROM [Audit].[dbo].[SalesGuestLaborComparativeAnalysis]&#xA;   WHERE [Sales Date]      &gt;  (GETDATE()-182)&#xA;     AND SUBSTRING([Store ID - Name],2,3) NOT IN (SELECT StoreNum FROM Staging.dbo.StoreClosed)&#xA;&#x9; AND [OpenDate]        &lt;  (GETDATE()-182)&#xA;&#x9; AND [Cat]             IN ('O','N','F')&#xA;     AND([ML_Cube_TLsales] &lt;  1&#xA;      OR [ML_Cube_TLguests]&lt;  1&#xA;&#x9;  OR [ML_FoodSales]    &lt;  1&#xA;&#x9;  OR ([ML_LiquorSales]+[ML_WineSales]+[ML_DraftBeerSales]+[ML_BottledBeerSales]) &lt;  1)&#xA;ORDER BY [Store ID - Name]&#xA;        ,[Sales Date]&#xA;&#xA;*/&#xA;--" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{b7a5cf84-d0c4-450d-86fa-264ffccb365d}"
      DTS:From="Package\Create Calendar and Stores"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Create Sales Mix" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{4cae9c8a-5e2a-4723-aaaf-2037a4b25795}"
      DTS:From="Package\Create Sales Mix"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Create Sales and Guest" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="210,42"
          Id="Package\Create Calendar and Stores"
          TopLeft="60,60" />
        <NodeLayout
          Size="190,42"
          Id="Package\Create Sales and Guest"
          TopLeft="70,224" />
        <NodeLayout
          Size="159,42"
          Id="Package\Create Sales Mix"
          TopLeft="85.5,142" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="165,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40"
              Start="0,0"
              End="0,32.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="165,184">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40"
              Start="0,0"
              End="0,32.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>